import dns.resolver
import requests
import argparse
import openpyxl
from ping3 import ping

def brute_force_subdomains(domain, common_subdomains):
    subdomains = []
    for line in common_subdomains:
        subdomain = line + '.' + domain
        try:
            answers = dns.resolver.resolve(subdomain, 'A')
            ips = [answer.to_text() for answer in answers]
            subdomains.append((subdomain, ips))
        except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer, dns.resolver.Timeout, dns.name.NameTooLong):
            pass
    return subdomains

def fetch_from_crtsh(domain):
    url = f"https://crt.sh/?q=%25.{domain}&output=json"
    response = requests.get(url)
    if response.status_code == 200:
        json_response = response.json()
        subdomains = set()
        for entry in json_response:
            subdomains.add(entry['name_value'])
        return list(subdomains)
    else:
        return []

def resolve_ips(subdomains):
    resolved_subdomains = []
    for subdomain in subdomains:
        try:
            answers = dns.resolver.resolve(subdomain, 'A')
            ips = [answer.to_text() for answer in answers]
            resolved_subdomains.append((subdomain, ips))
        except (dns.resolver.NXDOMAIN, dns.resolver.NoAnswer, dns.resolver.Timeout, dns.name.NameTooLong):
            pass
    return resolved_subdomains

def ping_ips(ip_addresses):
    statuses = []
    for ip in ip_addresses:
        try:
            delay = ping(ip, timeout=2)
            if delay is None:
                statuses.append('Unreachable')
            else:
                statuses.append('Reachable')
        except Exception as e:
            statuses.append(f'Error: {e}')
    return statuses

def output_excel(filename, data):
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "Subdomains"

    sheet.append(["Subdomain", "IP Addresses", "Status"])

    for subdomain, ips in data:
        statuses = ping_ips(ips)
        for ip, status in zip(ips, statuses):
            sheet.append([subdomain, ip, status])

    workbook.save(filename + '.xlsx')
    print(f"Results have been written to {filename}.xlsx")
    

def get_common_subdomains():
    common_subdomains = [
        "www", "mail", "ftp", "webmail", "smtp", "secure", "ns1", "ns2", "admin", "vpn",
        "m", "shop", "mail2", "test", "portal", "host", "support", "dev", "web", "mx",
        "cpanel", "news", "vpn", "mail1", "imap", "pop", "webdisk", "stage", "beta",
        "blog", "forum", "help", "docs", "demo", "wiki", "static", "cdn", "api", "images",
        "assets", "resources", "info", "search", "download", "proxy", "backup", "db",
        "mobile", "auth", "app", "client", "cms", "data", "files", "gateway", "git",
        "hub", "internal", "live", "media", "office", "old", "remote", "sandbox", "server",
        "staging", "status", "temp", "test1", "upload", "video", "dev1", "test2", "dev2",
        "dev3", "new", "old", "survey", "tools", "user", "vps", "web1", "www1", "www2",
        "www3", "api1", "api2", "dashboard", "directory", "events", "example", "exchange",
        "home", "mail3", "my", "pop3", "smtp2", "web2", "workspace", "log", "monitor",
        "metrics", "alerts", "reporting", "admin1", "admin2", "node1", "node2", "node3",
        "cache", "devops", "docker", "gitlab", "grafana", "kibana", "loadbalancer", "nginx",
        "node", "registry", "ci", "cd", "jira", "confluence", "bitbucket", "slack",
        "jira1", "jenkins", "kubernetes", "analytics", "collector", "datadog", "ops",
        "ansible", "automation", "backup1", "build", "builder", "central", "cluster",
        "composer", "db1", "db2", "deploy", "docs1", "docs2", "elastic", "engine",
        "files1", "gateway1", "hadoop", "hbase", "influxdb", "jenkins1", "kafka",
        "kibana1", "log1", "logs", "main", "main1", "main2", "manager", "master",
        "minio", "monitoring", "mysql", "node4", "ops1", "ops2", "pgsql", "postgres",
        "prod", "queue", "rabbitmq", "redis", "registry1", "repo", "services",
        "solr", "spark", "sql", "storage", "swarm", "tasks", "team", "teamcity",
        "testserver", "vault", "vcs", "web3", "worker", "workers"
    ]
    return common_subdomains

def main():
    parser = argparse.ArgumentParser(description='Find subdomains and their IPs for a given domain.')
    parser.add_argument("--version", action="store_true", help="Show the version of Active IP Resolver")
    parser.add_argument('domain', type=str, help='Specifying the Domain for resolving the IPs')

    args = parser.parse_args()

    if args.version:
        print("Active IP Resolver version 1.0.0")
        print("\n\n----------------------------------------------------------")
        return

    domain = args.domain

    common_subdomains = get_common_subdomains()

    print("Brute forcing subdomains...")
    subdomains_brute_force = brute_force_subdomains(domain, common_subdomains)

    print("Fetching subdomains from crt.sh...")
    subdomains_crtsh = fetch_from_crtsh(domain)

    unique_subdomains = set(sub for sub, _ in subdomains_brute_force) | set(subdomains_crtsh)
    all_subdomains_with_ips = subdomains_brute_force + resolve_ips(unique_subdomains)
    
    print("Found all subdomains!")
    print("Checking status of all IPs...")
    output_filename = "resolved_domain_" + domain.split('.')[0]
    output_excel(output_filename, all_subdomains_with_ips)

if __name__ == "__main__":
    main()
