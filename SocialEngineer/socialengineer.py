import argparse
import requests
import socket
import dns.resolver
import whois
import subprocess
import shodan
import config

def get_ip_addresses(domain):
    try:
        ip_addresses = socket.gethostbyname_ex(domain)
        return ip_addresses[2]
    except socket.gaierror:
        return []

def get_subdomains(domain):
    subdomains = []
    try:
        result = subprocess.run(['sublist3r', '-d', domain, '-o', 'subdomains.txt'], capture_output=True)
        with open('subdomains.txt', 'r') as file:
            subdomains = file.read().splitlines()
    except Exception as e:
        print(f"Error in subdomain enumeration: {e}")
    return subdomains

def check_active_status(ip_addresses):
    active_ips = []
    for ip in ip_addresses:
        response = subprocess.run(['ping', '-c', '1', ip], capture_output=True)
        if response.returncode == 0:
            active_ips.append(ip)
    return active_ips

def get_whois_info(domain):
    try:
        whois_info = whois.whois(domain)
        return whois_info
    except Exception as e:
        return f"Error in WHOIS lookup: {e}"

def shodan_scan(api_key, ip_addresses):
    api = shodan.Shodan(api_key)
    results = []
    for ip in ip_addresses:
        try:
            result = api.host(ip)
            results.append(result)
        except shodan.APIError as e:
            print(f"Shodan API Error for IP {ip}: {e}")
    return results

def basic_recon(domain):
    print(f"Gathering information for domain: {domain}")
    
    ip_addresses = get_ip_addresses(domain)
    print(f"IP Addresses: {ip_addresses}")

    subdomains = get_subdomains(domain)
    print(f"Subdomains: {subdomains}")

    active_ips = check_active_status(ip_addresses)
    print(f"Active IP Addresses: {active_ips}")

    whois_info = get_whois_info(domain)
    print(f"WHOIS Information: {whois_info}")

    shodan_api_key = config.shodan_api_key #'your_shodan_api_key'
    shodan_results = shodan_scan(shodan_api_key, active_ips)
    print(f"Shodan Results: {shodan_results}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Perform basic reconnaissance on a domain.')
    parser.add_argument('domain', type=str, help='The domain to perform reconnaissance on')
    args = parser.parse_args()

    basic_recon(args.domain)
